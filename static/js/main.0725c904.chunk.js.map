{"version":3,"sources":["Match/Match.jsx","MatchModifiers/MatchModifiers.jsx","MatchesOriginal/MatchesOriginal.jsx","MatchesAsBinary/MatchesAsBinary.jsx","MatchVisualizers/MatchVisualizerFactory.js","ForceAIMoveButton/ForceAIMoveButton.js","TurnActionBar/TurnActionBar.jsx","GameModeSelectionBar/GameModeSelectionBar.js","MatchGame/MatchGame.jsx","LinkButton/LinkButton.js","WinPage/WinPage.js","LosePage/LosePage.js","ErrorPage/ErrorPage.js","GameOverPage/GameOverPage.js","TitlePage/TitlePage.jsx","TransitionRouteWrapper/TransitionRouteWrapper.jsx","NimTopBar/NimTopBar.js","App.js","serviceWorker.js","index.js"],"names":["Match","react_default","a","createElement","src","className","alt","MatchModifiers","props","incrementMatches","decrementMatches","currentMatch","minMatches","maxMatches","isRowLocked","disabled","onClick","index_es","icon","faPlus","faMinus","MatchesOriginal","provisionalMatches","initialMatchesOnTurn","hasChangeOccurred","id","map","count","i","key","_","times","Match_Match","MatchModifiers_MatchModifiers","MatchesAsBinary","_countInBinary","strToPad","numberOfRows","binaryRepOfMatches","toString","amountToPad","Math","floor","log2","_maxDigitPlace2","length","repeat","MatchVisualizerFactory","matchVizOptions","display","displaySmall","visualizer","this","modeId","expectedVisualizer","find","viz","isUndefined","ForceAIMoveButton","type","handleForceAIMoveButton","isFirstTurn","TurnActionBar","restartGame","resetTurn","finalizeTurn","e","preventDefault","GameModeSelectionBar","possibleModes","handleModeSelection","role","aria-label","mode","MatchGame","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","prevMax","state","matchesWithInc","toConsumableArray","setState","matchesWithDec","_AITurn","curMatches","isEndGame","reduce","acc","console","log","remainingTurns","maxVal","max","indexOfMax","indexOf","newMatches","matchesToRemove","nimSum","_this$_getOptimalMove","_getOptimalMoveBasedOnSum","_this$_getOptimalMove2","slicedToArray","index","valueToRemove","validRowsIndexes","numberOfMatches","push","randomRowMatchCount","random","optionalMatches","arguments","undefined","nextPlayer","_nextPlayer","currentPlayer","initialMatches","_initializeMatchesArray","userGoesFirst","PLAYER_USER","PLAYER_AI","currentMatchVisualizer","getVisualizer","matchCounts","initialVisualizer","winner","prevProps","prevState","snapshot","error","concat","forEach","curIndex","isEqual","CurrentMatchVisualizer","react_router","to","pathname","search","allVizualizerOptions","TurnActionBar_TurnActionBar","Component","PlayButton","displayText","react_router_dom","WinPage","Fragment","LosePage","ErrorPage","GameOverPage","GameOverScreen","values","queryString","parse","location","TitlePage","TransitionRouteWrapper","WrappedComponent","children","NimTopBar","App","routerRender","_ref","WrappedTitlePage","WrappedGameOverPage","WrappedLearnPage","WrappedPlayPage","WrappedErrorPage","TransitionGroup","CSSTransition","timeout","exact","path","component","basename","process","NimTopBar_NimTopBar","render","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0725c904.chunk.js","sourcesContent":["import React from 'react';\nimport './Match.css'\n\nexport default function Match() {\n    return (\n        <img\n            src=\"matchstick-2.png\"\n            className=\"match\"\n            alt=\"One of the matches in this row\"\n        />\n    );\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\nimport './MatchModifiers.css';\nexport default function MatchModifiers (props) {\n    const { incrementMatches, decrementMatches, currentMatch, minMatches, maxMatches, isRowLocked} = props; \n    return (\n        <span className=\"match-modifier-btns\">\n            <button\n                className=\"btn btn-primary btn-sm\"\n                disabled={maxMatches || isRowLocked}\n                onClick={() => incrementMatches(currentMatch)}\n            >\n                <FontAwesomeIcon icon={faPlus}/>\n            </button>\n            <button\n                className=\"btn btn-primary btn-sm\"\n                disabled={minMatches || isRowLocked}\n                onClick={() => decrementMatches(currentMatch)}\n            >\n                <FontAwesomeIcon icon={faMinus}/>\n            </button>\n        </span>\n    );\n}","import React from 'react';\nimport Match from \"../Match/Match.jsx\";\nimport MatchModifiers from \"../MatchModifiers/MatchModifiers.jsx\";\nimport './MatchesOriginal.css'\nimport _ from 'lodash';\nexport default function MatchesOriginal (props) {\n    const { provisionalMatches, initialMatchesOnTurn, incrementMatches, decrementMatches, hasChangeOccurred } = props;\n    return (\n        <div id=\"match-original-game-container\">\n            {provisionalMatches.map((count, i) => {\n                // For every row of matches, if a change has occured, we want to lock any rows that aren't in the process of being changed \n                // This ensures that only one row can be modified at a given time\n                const isRowLocked = hasChangeOccurred && (count === initialMatchesOnTurn[i]);\n                return (\n                    <div className=\"match-row\" key={i}>\n                        <span className=\"matches-fixed-width-container\">\n                            {_.times(count, (i) => { \n                                return <Match key={i}/>\n                            })}\n                        </span>\n                        <MatchModifiers\n                            currentMatch={i}\n                            maxMatches={count === initialMatchesOnTurn[i]}\n                            minMatches={count === 0}\n                            incrementMatches={incrementMatches}\n                            decrementMatches={decrementMatches}\n                            isRowLocked={isRowLocked}\n                        />\n                    </div>\n                );\n            })}\n        </div>\n    );\n}","import React from 'react';\nimport MatchModifiers from \"../MatchModifiers/MatchModifiers.jsx\";\n\nexport default function MatchesAsBinary(props) {\n    // Not only does this function convert the count, an int, into a binary representaion in string form, \n    // But it padds the left side with as many 0's as needed to match the maxNumber of Digits\n    function _countInBinary(count) {\n        const { numberOfRows } = props;\n        const binaryRepOfMatches = count.toString(2);\n        // Now we need to figure out the padding;\n        const amountToPad = _maxDigitPlace2(numberOfRows) - binaryRepOfMatches.length;\n        return _padWithZeros(count.toString(2), amountToPad);\n    }\n\n    // Given a string, pad it lengthOfPadding times with zeros on the left\n    function _padWithZeros(strToPad, lengthOfPadding) {\n        return \"0\".repeat(lengthOfPadding) + strToPad;\n    }\n\n    // Use the number of rows to determine the maximum number of digit places \n    // i.e. How many columns would be taken up if you wrote out the number in binary\n    function _maxDigitPlace2(numberOfRows) {\n        return Math.floor(Math.log2((numberOfRows * 2) - 1)) + 1;\n    }\n\n    const { provisionalMatches, initialMatchesOnTurn, incrementMatches, decrementMatches, hasChangeOccurred } = props;\n    return (\n        <div id=\"match-original-game-container\">\n            {provisionalMatches.map((count, i) => {\n                // For every row of matches, if a change has occured, we want to lock any rows that aren't in the process of being changed \n                // This ensures that only one row can be modified at a given time\n                const isRowLocked = hasChangeOccurred && (count === initialMatchesOnTurn[i]);\n                return (\n                    <div className=\"match-row\" key={i}>\n                        <span className=\"matches-fixed-width-container\">\n                            <h1>\n                                {_countInBinary(count)}\n                            </h1>\n                        </span>\n                        <MatchModifiers\n                            currentMatch={i}\n                            maxMatches={count === initialMatchesOnTurn[i]}\n                            minMatches={count === 0}\n                            incrementMatches={incrementMatches}\n                            decrementMatches={decrementMatches}\n                            isRowLocked={isRowLocked}\n                        />\n                    </div>\n                );\n            })}\n        </div>\n    );\n}","import MatchesOriginal from '../MatchesOriginal/MatchesOriginal.jsx';\nimport _ from 'lodash';\n// import MatchesLeftCollapsed from './MatchesLeftCollapsed.jsx'\n// import MatchesAsDecimal from './MatchesAsDecimal.jsx'\nimport MatchesAsBinary from '../MatchesAsBinary/MatchesAsBinary.jsx'\n\nexport default class MatchVisualizerFactory {\n    matchVizOptions = [\n        {\n            id: \"original\",\n            display: \"Matches Original\",\n            displaySmall: \"Classic\",\n            visualizer: MatchesOriginal\n        },\n        // {\n        //     id: \"left\",\n        //     display: \"Matches Left-Collapsed\",\n        //     displaySmall: \"Matches-Left\",\n        //     visualizer: null\n        //     // visualizer: MatchesLeftCollapsed\n        // },\n        // {\n        //     id: \"decimal\",\n        //     display: \"Decimal Numbers\",\n        //     displaySmall: \"Decimal\",\n        //     visualizer: null\n        //     // visualizer: MatchesAsDecimal\n        // },\n        {\n            id: \"binary\",\n            display: \"Binary Numbers\",\n            displaySmall: \"Binary\",\n            // visualizer: null\n            visualizer: MatchesAsBinary\n        },\n    ];\n\n    allVizualizerOptions() {\n        return this.matchVizOptions;\n    }\n    \n    initialVisualizer() {\n        return this.matchVizOptions[0].visualizer;\n    }\n\n    getVisualizer(modeId) {\n        const expectedVisualizer = this.matchVizOptions.find((viz)=> {\n            return viz.id === modeId;\n        });\n        if (_.isUndefined(expectedVisualizer)) {\n            return null;\n        } else { \n            return expectedVisualizer.visualizer;\n        }\n    }\n};","import React from 'react';\n\nexport default function ForceAIMoveButton(props) {\n    return (\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={props.handleForceAIMoveButton} disabled={!props.isFirstTurn}>AI Moves First</button>\n    );\n}","import React from 'react';\nimport './TurnActionBar.css'\nimport ForceAIMoveButton from '../ForceAIMoveButton/ForceAIMoveButton';\n\nexport default function TurnActionBar(props) {\n    const { restartGame, resetTurn, finalizeTurn, hasChangeOccurred, isFirstTurn, handleForceAIMoveButton } = props;\n\n    function handleRestartClick(e) { \n        e.preventDefault();\n        restartGame();\n    }\n    function handleDoneClick(e) { \n        e.preventDefault();\n        finalizeTurn();\n    }\n    function handleResetClick(e) { \n        e.preventDefault();\n        resetTurn();\n    }\n    function handleAIMoveClick(e) { \n        e.preventDefault();\n        handleForceAIMoveButton();\n    }\n\n    return (\n        <div id=\"turn-action-bar\">\n            <ForceAIMoveButton\n                isFirstTurn={isFirstTurn}\n                handleForceAIMoveButton={handleAIMoveClick}\n            />\n            <button className=\"btn btn-outline-primary\" onClick={handleRestartClick}>Restart Game</button>\n            <button className=\"btn btn-outline-primary\" disabled={!hasChangeOccurred} onClick={handleResetClick}>Reset Turn</button>\n            <button className=\"btn btn-outline-primary\" disabled={!hasChangeOccurred} onClick={handleDoneClick}>Turn Finished</button>\n        </div> \n    );\n}","import React from 'react';\n\nexport default function GameModeSelectionBar(props) {\n    const { possibleModes, handleModeSelection } = props;\n\n    return (\n        <div className=\"d-flex justify-content-center\" id=\"mode-btns-container\">\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Mode Selection Menu\">\n                {possibleModes.map((mode) => {\n                    return (\n                        <button type=\"button\" key={mode.id} className=\"btn btn-primary\" onClick={()=>handleModeSelection(mode.id)}>{mode.displaySmall}</button>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport { Redirect } from 'react-router'\nimport MatchVisualizerFactory from '../MatchVisualizers/MatchVisualizerFactory.js';\nimport TurnActionBar from '../TurnActionBar/TurnActionBar.jsx';\nimport GameModeSelectionBar from '../GameModeSelectionBar/GameModeSelectionBar.js';\nimport _ from 'lodash';\n\nexport default class MatchGame extends Component {\n    constructor(props) { \n        super(props);\n        this.PLAYER_USER = 0;\n        this.PLAYER_AI = 1;\n\n        // Configuration of Game State:\n        // TODO: Move into state once modifiable;\n        this.numberOfRows = 4;\n        this.userGoesFirst = true;\n        this.MatchVisualizerFactory = new MatchVisualizerFactory();\n\n        const matchCounts = this._initializeMatchesArray()\n        this.state = {\n            provisionalMatches: matchCounts,\n            initialMatchesOnTurn: matchCounts,\n            currentPlayer: this.PLAYER_USER,\n            currentMatchVisualizer: this.MatchVisualizerFactory.initialVisualizer(),\n            isFirstTurn: true,\n            winner: undefined\n        }\n    }\n\n    // Handle the automated turns of the AI anytime the screen updates\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (_.max(this.state.initialMatchesOnTurn) === 0 && !this.state.winner) {\n            // First - check to see if there is a winner:\n            const winner = this.state.currentPlayer === this.PLAYER_AI ? \"AI\" : \"User\";\n            // The winner is the first person to start their turn with a 0 maxMatches\n            console.log(\"Congratulations on winning \" + winner + \"!\");\n            this.setState({\n                winner\n            });\n        } else if(this.state.currentPlayer === this.PLAYER_AI) { \n            // Else, if the AI's turn is up let the algo go!\n            this._AITurn()\n        }\n    }\n\n    // Return an initialized array of matches based on the number of rows the game has\n    _initializeMatchesArray() {\n        const matchCounts = [];\n        // For each row 0,1,2,3,... we have, push 1,3,5,7,... matches\n        for (let i = 0; i < this.numberOfRows; i++) { \n            matchCounts.push(1 + (2 * i)) \n        }\n        return matchCounts;\n    }\n\n    // Internally defined function for transitioning from one turn to the next\n    _nextPlayer() {\n        switch(this.state.currentPlayer) {\n            case this.PLAYER_AI:\n                return this.PLAYER_USER;\n            case this.PLAYER_USER:\n                return this.PLAYER_AI;\n            default: \n                console.error(`Switching current player but the turn-switch mechanic is undefined for this player ${this.state.currentPlayer}`);\n                return null;\n        }\n    }\n\n    // Increments the current count for the matches in the 'ith' row, being careful to not go above the previous highest value for that row\n    incrementMatches = (i) => {\n        const prevMax = this.state.initialMatchesOnTurn[i];\n        const curCount = this.state.provisionalMatches[i];\n        if (curCount + 1 > prevMax) {\n            return\n        } else {\n            const matchesWithInc = [...this.state.provisionalMatches];\n            matchesWithInc[i] += 1;\n            this.setState({\n                provisionalMatches: matchesWithInc\n            });\n        }\n    }\n\n    // Decremenets the current count for the matches in the 'ith' row, being careful to not go below 0;\n    decrementMatches = (i) => {\n        const curCount = this.state.provisionalMatches[i];\n        if (curCount - 1 < 0) {\n            return\n        } else {\n            const matchesWithDec = [...this.state.provisionalMatches];\n            matchesWithDec[i] -= 1;\n            this.setState({\n                provisionalMatches: matchesWithDec\n            });\n        }\n    }\n\n    // Resets the matches to how they were oriented at the beginning of the turn\n    resetTurn = () => {\n        this.setState({\n            provisionalMatches: this.state.initialMatchesOnTurn\n        });\n    }\n\n    // TODO: Better name;\n    // Finding a move baed on the nimSum: find a row with matchCount 'x' for which x > 0 && x ^ nimSum < x;\n    // Return the index of the current row, and the original count minus the XOR value \n    _getOptimalMoveBasedOnSum(nimSum) {\n        // Have an illegal index initially; inital value to remove shouldn't matter\n        let index = -1;\n        let valueToRemove = 0;\n        // Iterate over all our currentMatches\n        this.state.provisionalMatches.forEach((count, curIndex) => {\n            ///////////////////////\n            // Our Algorithm //////\n            //// Short, But Verbose\n            ///////////////////////\n            // To determine the ideal valueToRemove, let's think about what we want to end up with and work backwards.\n            //\n            // The optimal (non-endgame) strategy is to remove matches from some target row such that:\n            //  - The nim-sum of all _remaining_ matches is 0;\n            //  - i.e. x_0 ^ x_1 ^ x_target's remaining matches ^ ... ^ x_n = 0\n            // \n            // Remark 0: 0 ^ x = x for any number x\n            // Remark 1: x ^ x = 0 for any number x\n            // \n            // One way of achieving our ideal move this is to ensure that: \n            //  - After modifying our target row, the number of remaining matches should be:\n            //    (x_0 ^ x_1 ^ ... ^ x_n) many matches, since this value will XOR with our remaining matches \n            //    for a nimSum of 0;\n            // Said another way:\n            //  - Can we remove some 'n' matches from our target row such that\n            //     x_target - n === (x_0 ^ x_1 ^ ... ^ x_n), for all x !== x_target\n            //\n            // Important question yet to be answered: Which row is our target row?!\n            // \n            // To find x_target, we should iterate over all our rows and check the condition we described above.\n            // Something like, for every row 'i' with matches 'x_i':\n            // - Is there some number of matches 'n' s.t. \n            //   x_i - n === (x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i\n            // \n            // We're looking for the valueToRemove, 'n', so if we move our terms around a bit, we might be done!\n            // - n = 'x_i - (x_0 ^ x_1 ^ ... ^ x_n)' for all x !== x_i\n            // \n            // Except, minor problem -- 'n' might be negative based on the formula above!\n            // Consider matches [1,5,2]\n            // Row one has x_0 = 1\n            // nimSum of all rows except the first = 7\n            // 1 - 7 = (-6)\n            //\n            // We can't remove a negative number of matches, or add more matches than the number we started with \n            // One way we can take this into account is by only considering scenarios in which:\n            // - (x_i - n) < x_i\n            // Said another way: \n            // - '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i' < x_i\n            // By requiring this condition be met, we can ensure that our n is always > 0\n            //\n            // Great! So we have our necessary conditions to check for\n            // We know how to derive n from '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i'\n            // We just need to calculate: '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i'\n            //\n            // Remark 2: We know that our nimSum = (x_0 ^ x_1 ^ ... ^ x_n)\n            // \n            // Combining remarks 0, 1 and 2, we can calculate '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i' by computing:\n            // - x_i ^ nimSum\n            // Proof of equality fully expanded: \n            // - x_i ^ x_0 ^ x_1 ^ ... ^ x_i ^ ... ^ x_n) | Expand nimSum\n            // - x_i ^ x_i ^ x_0 ^ ... ^ x_n              | Chained Communitivity of ^ let's us move our x_i together\n            // - 0 ^ x_0 ^ ... ^ x_n                      | From Remark 1, x_i ^ x_i === 0\n            // - x_0 ^ ... ^ x_n for x !== x_i            | From Remark 0, x ^ 0 === x\n            //\n            // One last detail: once we find an optimal number of elements to remove, we can skip all the other rows\n            // \n            // Putting it all together now, our algorithm is:\n            // - For every row 'i' with matches 'x_i':\n            //      - Compute 'x_0 ^ ... ^ x_n for x !== x_i' by performing x_i ^ nimSum\n            //      - Check that x_0 ^ ... ^ x_n for x !== x_i is less that x_i\n            //      - If it is, 'n' is equal to 'x_i - (x_0 ^ ... ^ x_n for x !== x_i)',\n            //      - Make note that we've got an optimal move to make, so we can skip through all other rows\n            //  - Return the row of interest's index 'i' and the value 'n' to remove \n\n            if (index !== -1) return;\n            // If the result of count XOR nimSum is < count, this is the row we can remove a value from! \n            if ((count ^ nimSum) < count) {\n                // Track the index,\n                index = curIndex;\n                // And note our value to remove \n                valueToRemove = count - (count ^ nimSum);\n            }\n        });\n        return [index, valueToRemove]; \n    }\n\n    _AITurn= () =>{\n        // Strategy can be broken up into two modes: Endgame and typical\n        // First, check to see if we are in an endgame orientation - specifically, if there is <= 1 row left with more than one match\n        const curMatches = this.state.initialMatchesOnTurn;\n        const isEndGame = _.reduce(curMatches, (acc, count) => count > 1 ? acc + 1 : acc, 0) <= 1;\n        console.log('isEndGame: ', isEndGame);\n        if (isEndGame) {\n            // Calc the # of remaining turns by looking at the non-zero rows\n            const remainingTurns = _.reduce(curMatches, (acc, count) => count > 0 ? acc + 1 : acc, 0);\n            console.log('remainingTurns: ', remainingTurns);\n            // Get the max value \n            const maxVal = _.max(curMatches);\n            const indexOfMax = curMatches.indexOf(maxVal)\n            \n            const newMatches = [...curMatches];\n            // Get the number of matches to remove\n            const matchesToRemove = (maxVal - (remainingTurns % 2));\n            // If the matchesToREmove is zero, the AI cannot win; just remove the maxVal\n            if (matchesToRemove === 0) { \n                newMatches[indexOfMax] -= maxVal;\n            } else { \n                newMatches[indexOfMax] -= matchesToRemove;\n            }\n            this.finalizeTurn(newMatches);\n        } else { \n            // First, get the nim sum of all the remaining match-rows, i.e. XOR all counts together\n            const nimSum = _.reduce(curMatches, (nimSum, count) => count ^ nimSum, 0);\n            // console.log('nimSum: ', nimSum);\n            // Then, get the next value to remove and the index from the nimSum - if there is such a move\n            let [index, valueToRemove] = this._getOptimalMoveBasedOnSum(nimSum);\n            if (index === -1) {\n                // If there's on optimal move, pick a random row, pick a random number of matches;\n                const validRowsIndexes = _.reduce(curMatches, (acc, numberOfMatches, i) => {\n                    if (numberOfMatches === 0) {\n                        return acc;\n                    } else {\n                        acc.push(i);\n                        return acc;\n                    }\n                }, []);\n                // Pick a randomRow by index\n                index = validRowsIndexes[Math.floor(Math.random()*(validRowsIndexes.length))];\n                // Get the matches in that row by looking at the curMatches array\n                const randomRowMatchCount = curMatches[index];\n                // To get a random amount of matches to remove, use random to seed a valu between 0..1\n                // Multiply that my the matchCount to map it between 0...matchCount - 1; \n                // Add one to make sure we remove between 1...matchCount many matches.\n                valueToRemove = Math.floor(Math.random()*randomRowMatchCount) + 1\n            }\n            const newMatches = [...curMatches];\n            newMatches[index] -= valueToRemove;\n            this.finalizeTurn(newMatches)\n        }\n    }\n\n    // Finalize a turn by updating matches (using optional arg or current provisional) and switching to the next player\n    finalizeTurn = (optionalMatches=null) => {\n        // New matches are either provided matches or the provisional matches\n        const newMatches = optionalMatches ? optionalMatches : this.state.provisionalMatches\n        const nextPlayer = this._nextPlayer();\n        this.setState({\n            initialMatchesOnTurn: newMatches,\n            provisionalMatches: newMatches,\n            isFirstTurn: false,\n            currentPlayer: nextPlayer\n        });\n    }\n\n    // Restarts the game to it's initial configuration\n    restartGame = () => {\n        // Get the inital matches array\n        const initialMatches = this._initializeMatchesArray();\n        this.setState({\n            provisionalMatches: initialMatches,\n            initialMatchesOnTurn: initialMatches,\n            isFirstTurn: true,\n            // Starting player is based on whether or not the userGoesFirst\n            currentPlayer: this.userGoesFirst ? this.PLAYER_USER : this.PLAYER_AI\n        });\n    }\n\n    // Sets the current player to be the AI\n    handleForceAIMoveButton = () => { \n        this.setState({\n            currentPlayer: this.PLAYER_AI\n        });\n    }\n\n    // Takes a given mode and selects it \n    handleModeSelection = (modeId) => { \n        this.setState({\n            currentMatchVisualizer: this.MatchVisualizerFactory.getVisualizer(modeId)\n        })\n    }\n\n    render() {\n        const hasChangeOccurred = !_.isEqual(this.state.provisionalMatches, this.state.initialMatchesOnTurn);\n        const CurrentMatchVisualizer = this.state.currentMatchVisualizer;\n        // If there's a winner, redirect to the winner page\n        if (this.state.winner) { \n            return <Redirect push to={{\n                pathname: \"/gameover\",\n                search: \"?winner=\" + this.state.winner\n            }}/>\n        }\n        // Else, just render the current game\n        return (\n            <div id=\"match-game-container\">\n                <GameModeSelectionBar\n                    possibleModes={this.MatchVisualizerFactory.allVizualizerOptions()}\n                    handleModeSelection={this.handleModeSelection}\n                />\n                {CurrentMatchVisualizer && <CurrentMatchVisualizer\n                    provisionalMatches={this.state.provisionalMatches}\n                    initialMatchesOnTurn={this.state.initialMatchesOnTurn}\n                    incrementMatches={this.incrementMatches}\n                    decrementMatches={this.decrementMatches}\n                    hasChangeOccurred={hasChangeOccurred}\n                    numberOfRows={this.numberOfRows}\n                />}\n                <TurnActionBar\n                    isFirstTurn={this.state.isFirstTurn}\n                    restartGame={this.restartGame}\n                    resetTurn={this.resetTurn}\n                    finalizeTurn={this.finalizeTurn}\n                    handleForceAIMoveButton={this.handleForceAIMoveButton}\n                    hasChangeOccurred={hasChangeOccurred}\n                />\n            </div>\n        );\n    }\n}","import React from 'react'; \nimport { Link } from 'react-router-dom';\n\nexport default function PlayButton(props) {\n    const { pathname, displayText } = props;\n    return (\n        <Link to={pathname}>\n            <button className=\"btn btn-lg btn-outline-primary\">\n                {displayText}\n            </button>\n        </Link>\n    )\n}","import React from 'react';\nimport LinkButton from '../LinkButton/LinkButton.js';\n\nexport default function WinPage(props) {\n    return (\n        <React.Fragment>\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-3 \">Congratulations</h1>\n                <h1 className=\"display-4 mb-5\">You beat the AI!</h1>\n            </div>\n            <div className=\"d-flex justify-content-around m-5\" id=\"nav-btns\">\n                <LinkButton pathname=\"/\" displayText=\"Back Home\"/>\n                <LinkButton pathname=\"/play\" displayText=\"Play Again\"/>\n            </div>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport LinkButton from '../LinkButton/LinkButton.js';\n\nexport default function LosePage(props) {\n    return (\n        <React.Fragment>\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-3 \">Game Over</h1>\n                <h1 className=\"display-4 mb-5\">Better luck next time</h1>\n            </div>\n            <div className=\"d-flex justify-content-around m-5\" id=\"nav-btns\">\n                <LinkButton pathname=\"/\" displayText=\"Back Home\"/>\n                <LinkButton pathname=\"/play\" displayText=\"Play Again\"/>\n            </div>\n        </React.Fragment>\n    );\n}","import React from \"react\"; \nimport LinkButton from \"../LinkButton/LinkButton\";\n\nexport default function ErrorPage(props) {\n    return (\n        <React.Fragment>\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-3 \">Sorry</h1>\n                <h1 className=\"display-4 mb-5\">That's not a valid page...</h1>\n            </div>\n            <div className=\"d-flex justify-content-around m-5\" id=\"nav-btns\">\n                <LinkButton pathname=\"/\" displayText=\"Home\"/>\n                {/* <LinkButton pathname=\"/learn\" displayText=\"Learn More\"/> */}\n                <LinkButton pathname=\"/play\" displayText=\"Play Nim\"/>\n            </div>\n        </React.Fragment>\n    );\n}","import React from 'react';\nimport queryString from 'query-string'\nimport WinPage from '../WinPage/WinPage.js'\nimport LosePage from '../LosePage/LosePage.js'\nimport ErrorPage from '../ErrorPage/ErrorPage.js'\n\n\nexport default function GameOverPage(props) {\n    const values = queryString.parse(props.location.search)\n    let GameOverScreen;\n    if (values.winner === \"AI\") {\n        GameOverScreen = LosePage;\n    } else if (values.winner === \"User\"){ \n        GameOverScreen = WinPage;\n    } else {\n        GameOverScreen = ErrorPage;\n    }\n    return (\n        <GameOverScreen/>\n    );\n}","import React from 'react';\nimport LinkButton from '../LinkButton/LinkButton.js';\nimport './TitlePage.css';\n\nexport default function TitlePage() { \n    return (\n        <section id=\"title-page\">\n            <div className=\"jumbotron\">\n                <h1 className=\"display-3 text-center\">Digital Nim</h1>\n                <h2 className=\"display-4 text-center\">Playing Parlor Games Against AI</h2>\n            </div>\n            <div id=\"title-buttons\">\n                <LinkButton pathname=\"/learn\" displayText=\"Learn More\"/>\n                <LinkButton pathname=\"/play\" displayText=\"Start Playing\"/>\n            </div>\n        </section>\n    );\n}","import React from 'react';\nimport './TransitionRouteWrapper.css';\n\nexport default function TransitionRouteWrapper(WrappedComponent) {\n    function ExtendedComponent(props) { \n        return (\n            <div className=\"route\">\n                <WrappedComponent location={props.location}>\n                    {props.children}\n                </WrappedComponent>\n            </div>\n        );\n    }\n    return ExtendedComponent;\n}","import React from 'react'; \nimport { Link } from 'react-router-dom';\nimport './NimTopBar.css';\n\nexport default function NimTopBar(props) {\n    return (\n        <React.Fragment>\n            <nav className=\"navbar mb-2\">\n                <Link className=\"navbar-brand\" to=\"/\">Digital Nim</Link>\n            </nav>\n            {/* <div className=>\n\n            </div> */}\n        </React.Fragment>\n    );\n}\n\n","import React, { Component } from 'react';\nimport MatchGame from './MatchGame/MatchGame.jsx'; \nimport GameOverPage from './GameOverPage/GameOverPage.js'; \nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport TitlePage from './TitlePage/TitlePage.jsx';\nimport TransitionRouteWrapper from './TransitionRouteWrapper/TransitionRouteWrapper.jsx';\nimport ErrorPage from './ErrorPage/ErrorPage.js';\nimport NimTopBar from './NimTopBar/NimTopBar.js'\nimport './App.css';\n\nclass App extends Component {\n    routerRender = ({location}) => { \n        const WrappedTitlePage = TransitionRouteWrapper(TitlePage)\n        const WrappedGameOverPage = TransitionRouteWrapper(GameOverPage)\n        const WrappedLearnPage = TransitionRouteWrapper(MatchGame)\n        const WrappedPlayPage = TransitionRouteWrapper(MatchGame)\n        const WrappedErrorPage = TransitionRouteWrapper(ErrorPage)\n        return (\n            <TransitionGroup>\n                <CSSTransition\n                    key={location.key}\n                    timeout={1000}\n                >\n                    <Switch location={location}>\n                        <Route exact path=\"/\" component={WrappedTitlePage}/>\n                        <Route path=\"/learn\" component={WrappedLearnPage}/>\n                        <Route path=\"/play\" component={WrappedPlayPage}/>\n                        <Route path=\"/gameover\" component={WrappedGameOverPage}/>\n                        <Route component={WrappedErrorPage}/>\n                    </Switch>\n                </CSSTransition>\n            </TransitionGroup>\n        );\n    }\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <NimTopBar/>\n                <Route render={this.routerRender}/>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}