{"version":3,"sources":["TransitionRouteWrapper/TransitionRouteWrapper.jsx","Match/Match.jsx","MatchModifiers/MatchModifiers.jsx","MatchesOriginal/MatchesOriginal.jsx","MatchesAsBinary/MatchesAsBinary.jsx","MatchVisualizers/MatchVisualizerFactory.js","TurnActionBar/TurnActionBar.jsx","GameModeSelectionBar/GameModeSelectionBar.js","Pages/MatchGamePage.jsx","LinkButton/LinkButton.js","Pages/WinPage.js","Pages/LosePage.js","Pages/ErrorPage.js","Pages/GameOverPage.js","Pages/TitlePage.jsx","Pages/AboutPage.js","Pages/WinningStrategyPage.js","NimTopBar/NimTopBar.js","ScrollToTop.js","App.js","serviceWorker.js","index.js"],"names":["TransitionRouteWrapper","WrappedComponent","props","react_default","a","createElement","className","location","children","Match","removed","alt","src","MatchModifiers","incrementMatches","decrementMatches","currentMatch","minMatches","maxMatches","isRowLocked","disabled","onClick","index_es","icon","faPlus","faMinus","MatchesOriginal","provisionalMatches","initialMatchesOnTurn","hasChangeOccurred","Fragment","map","count","i","hasRowChanged","key","_","times","Match_Match","MatchModifiers_MatchModifiers","MatchesAsBinary","_countInBinary","strToPad","numberOfRows","binaryRepOfMatches","toString","amountToPad","Math","floor","log2","_maxDigitPlace2","length","repeat","id","MatchVisualizerFactory","matchVizOptions","display","displaySmall","visualizer","this","modeId","expectedVisualizer","find","viz","isUndefined","TurnActionBar","restartGame","finalizeTurn","isFirstTurn","handleForceAIMoveButton","handleRestartClick","e","preventDefault","handleDoneClick","handleAIMoveClick","type","GameModeSelectionBar","possibleModes","handleModeSelection","role","aria-label","mode","MatchGamePage","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","prevMax","state","matchesWithInc","toConsumableArray","setState","matchesWithDec","resetTurn","_AITurn","curMatches","isEndGame","reduce","acc","console","log","remainingTurns","maxVal","max","indexOfMax","indexOf","newMatches","matchesToRemove","nimSum","_this$_getOptimalMove","_getOptimalMoveBasedOnSum","_this$_getOptimalMove2","slicedToArray","index","valueToRemove","validRowsIndexes","numberOfMatches","push","randomRowMatchCount","random","optionalMatches","arguments","undefined","nextPlayer","_nextPlayer","currentPlayer","initialMatches","_initializeMatchesArray","userGoesFirst","PLAYER_USER","PLAYER_AI","currentMatchVisualizer","getVisualizer","matchCounts","initialVisualizer","winner","prevProps","prevState","snapshot","error","concat","forEach","curIndex","isEqual","CurrentMatchVisualizer","react_router","to","pathname","search","allVizualizerOptions","TurnActionBar_TurnActionBar","Component","LinkButton","displayText","react_router_dom","WinPage","LosePage","ErrorPage","GameOverPage","GameOverScreen","values","queryString","parse","TitlePage","TutorialAboutPage","style","objectFit","height","maxWidth","href","WinningStrategyPage","_useState","useState","_useState2","finalInformationReveal","setFinalInformationReveal","cursor","NimTopBar","m","class","data-toggle","data-target","aria-controls","aria-expanded","ScrollToTop","window","scrollTo","withRouter","App","routerRender","_ref","WrappedTitlePage","WrappedGameOverPage","WrappedAboutPage","AboutPage","WrappedWinningStrategyPage","WrappedPlayPage","WrappedErrorPage","TransitionGroup","CSSTransition","timeout","exact","path","component","basename","process","src_ScrollToTop","NimTopBar_NimTopBar","render","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d04d2ad.chunk.js","sourcesContent":["import React from 'react';\nimport './TransitionRouteWrapper.css';\n\nexport default function TransitionRouteWrapper(WrappedComponent) {\n    function ExtendedComponent(props) { \n        return (\n            <div className=\"route\">\n                <WrappedComponent location={props.location}>\n                    {props.children}\n                </WrappedComponent>\n            </div>\n        );\n    }\n    return ExtendedComponent;\n}","import React from 'react';\nimport './Match.css'\n\nexport default function Match(props) {\n    if (props.removed) {\n        return (\n            <div\n                className=\"match removed\"\n                alt=\"One of the matches in this row was removed\"\n            />\n        );\n    }\n    return (\n        <img\n            src=\"matchstick-2.png\"\n            className=\"match\"\n            alt=\"One of the matches in this row\"\n        />\n    );\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faMinus } from '@fortawesome/free-solid-svg-icons';\nimport React from 'react';\nimport './MatchModifiers.css';\nexport default function MatchModifiers (props) {\n    const { incrementMatches, decrementMatches, currentMatch, minMatches, maxMatches, isRowLocked} = props; \n    return (\n        <span className=\"match-modifier-btns\">\n            <button\n                className=\"btn btn-primary btn-sm\"\n                disabled={maxMatches || isRowLocked}\n                onClick={() => incrementMatches(currentMatch)}\n            >\n                <FontAwesomeIcon icon={faPlus}/>\n            </button>\n            <button\n                className=\"btn btn-primary btn-sm\"\n                disabled={minMatches || isRowLocked}\n                onClick={() => decrementMatches(currentMatch)}\n            >\n                <FontAwesomeIcon icon={faMinus}/>\n            </button>\n        </span>\n    );\n}","import React from 'react';\nimport Match from \"../Match/Match.jsx\";\nimport MatchModifiers from \"../MatchModifiers/MatchModifiers.jsx\";\nimport './MatchesOriginal.css'\nimport _ from 'lodash';\nexport default function MatchesOriginal (props) {\n    const { provisionalMatches, initialMatchesOnTurn, incrementMatches, decrementMatches, hasChangeOccurred } = props;\n    return (\n        <>\n            {provisionalMatches.map((count, i) => {\n                // For every row of matches, if a change has occured, we want to lock any rows that aren't in the process of being changed \n                // This ensures that only one row can be modified at a given time\n                const hasRowChanged = (count !== initialMatchesOnTurn[i])\n                const isRowLocked = hasChangeOccurred && !hasRowChanged\n                return (\n                    <div className={\"match-row\" + (hasRowChanged ? \" row-changed\" : \"\")} key={i}>\n                        <span className=\"matches-fixed-width-container\">\n                            {_.times(count, (i) => { \n                                return <Match key={i}/>\n                            })}\n                            {_.times(initialMatchesOnTurn[i] - count, (i) => { \n                                return <Match key={i} removed={true}/>\n                            })}\n                        </span>\n                        <MatchModifiers\n                            currentMatch={i}\n                            maxMatches={count === initialMatchesOnTurn[i]}\n                            minMatches={count === 0}\n                            incrementMatches={incrementMatches}\n                            decrementMatches={decrementMatches}\n                            isRowLocked={isRowLocked}\n                        />\n                    </div>\n                );\n            })}\n        </>\n    );\n}","import React from 'react';\nimport MatchModifiers from \"../MatchModifiers/MatchModifiers.jsx\";\n\nexport default function MatchesAsBinary(props) {\n    // Not only does this function convert the count, an int, into a binary representaion in string form, \n    // But it padds the left side with as many 0's as needed to match the maxNumber of Digits\n    function _countInBinary(count) {\n        const { numberOfRows } = props;\n        const binaryRepOfMatches = count.toString(2);\n        // Now we need to figure out the padding;\n        const amountToPad = _maxDigitPlace2(numberOfRows) - binaryRepOfMatches.length;\n        return _padWithZeros(count.toString(2), amountToPad);\n    }\n\n    // Given a string, pad it lengthOfPadding times with zeros on the left\n    function _padWithZeros(strToPad, lengthOfPadding) {\n        return \"0\".repeat(lengthOfPadding) + strToPad;\n    }\n\n    // Use the number of rows to determine the maximum number of digit places \n    // i.e. How many columns would be taken up if you wrote out the number in binary\n    function _maxDigitPlace2(numberOfRows) {\n        return Math.floor(Math.log2((numberOfRows * 2) - 1)) + 1;\n    }\n\n    const { provisionalMatches, initialMatchesOnTurn, incrementMatches, decrementMatches, hasChangeOccurred } = props;\n    return (\n        <div id=\"match-original-game-container\">\n            {provisionalMatches.map((count, i) => {\n                // For every row of matches, if a change has occured, we want to lock any rows that aren't in the process of being changed \n                // This ensures that only one row can be modified at a given time\n                const hasRowChanged = (count !== initialMatchesOnTurn[i])\n                const isRowLocked = hasChangeOccurred && !hasRowChanged\n                return (\n                    <div className={\"match-row\" + (hasRowChanged ? \" row-changed\" : \"\")} key={i}>\n                        <span className=\"matches-fixed-width-container\">\n                            <h1 className=\"float-right\">\n                                {_countInBinary(count)}\n                            </h1>\n                        </span>\n                        <MatchModifiers\n                            currentMatch={i}\n                            maxMatches={count === initialMatchesOnTurn[i]}\n                            minMatches={count === 0}\n                            incrementMatches={incrementMatches}\n                            decrementMatches={decrementMatches}\n                            isRowLocked={isRowLocked}\n                        />\n                    </div>\n                );\n            })}\n        </div>\n    );\n}","import MatchesOriginal from '../MatchesOriginal/MatchesOriginal.jsx';\nimport _ from 'lodash';\n// import MatchesLeftCollapsed from './MatchesLeftCollapsed.jsx'\n// import MatchesAsDecimal from './MatchesAsDecimal.jsx'\nimport MatchesAsBinary from '../MatchesAsBinary/MatchesAsBinary.jsx'\n\nexport default class MatchVisualizerFactory {\n    matchVizOptions = [\n        {\n            id: \"original\",\n            display: \"Matches Original\",\n            displaySmall: \"Classic\",\n            visualizer: MatchesOriginal\n        },\n        // {\n        //     id: \"left\",\n        //     display: \"Matches Left-Collapsed\",\n        //     displaySmall: \"Matches-Left\",\n        //     visualizer: null\n        //     // visualizer: MatchesLeftCollapsed\n        // },\n        // {\n        //     id: \"decimal\",\n        //     display: \"Decimal Numbers\",\n        //     displaySmall: \"Decimal\",\n        //     visualizer: null\n        //     // visualizer: MatchesAsDecimal\n        // },\n        {\n            id: \"binary\",\n            display: \"Binary Numbers\",\n            displaySmall: \"Binary\",\n            // visualizer: null\n            visualizer: MatchesAsBinary\n        },\n    ];\n\n    allVizualizerOptions() {\n        return this.matchVizOptions;\n    }\n    \n    initialVisualizer() {\n        return this.matchVizOptions[0].visualizer;\n    }\n\n    getVisualizer(modeId) {\n        const expectedVisualizer = this.matchVizOptions.find((viz)=> {\n            return viz.id === modeId;\n        });\n        if (_.isUndefined(expectedVisualizer)) {\n            return null;\n        } else { \n            return expectedVisualizer.visualizer;\n        }\n    }\n};","import React from 'react';\nimport './TurnActionBar.css'\n\nexport default function TurnActionBar(props) {\n    const { restartGame, finalizeTurn, hasChangeOccurred, isFirstTurn, handleForceAIMoveButton } = props;\n\n    function handleRestartClick(e) { \n        e.preventDefault();\n        restartGame();\n    }\n    function handleDoneClick(e) { \n        e.preventDefault();\n        finalizeTurn();\n    }\n    function handleAIMoveClick(e) { \n        e.preventDefault();\n        handleForceAIMoveButton();\n    }\n\n    return (\n        <>\n            <div id=\"turn-action-bar\" className=\"d-none d-sm-flex\">\n                <button type=\"button\" className=\"btn btn-primary\" onClick={handleAIMoveClick} disabled={!isFirstTurn}>\n                    AI Moves First\n                </button>\n                <button className=\"btn btn-primary\" onClick={handleRestartClick}>\n                    Restart Game\n                </button>\n                <button className=\"btn btn-primary\" disabled={!hasChangeOccurred} onClick={handleDoneClick}>\n                    Turn Finished\n                </button>\n            </div> \n            {/* For display on small-screen */}\n            <div id=\"turn-action-bar\" className=\"d-flex d-sm-none\">\n                <button type=\"button\" className=\"btn btn-sm btn-primary\" onClick={handleAIMoveClick} disabled={!isFirstTurn}>\n                    AI First\n                </button>\n                <button className=\"btn btn-sm btn-primary\" onClick={handleRestartClick}>\n                    Restart\n                </button>\n                <button className=\"btn btn-sm btn-primary\" disabled={!hasChangeOccurred} onClick={handleDoneClick}>\n                    Finished\n                </button>\n            </div> \n        </>\n    );\n}","import React from 'react';\n\nexport default function GameModeSelectionBar(props) {\n    const { possibleModes, handleModeSelection } = props;\n\n    return (\n        <div className=\"d-flex justify-content-center\" id=\"mode-btns-container\">\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Mode Selection Menu\">\n                {possibleModes.map((mode) => {\n                    return (\n                        <button type=\"button\" key={mode.id} className=\"btn btn-primary\" onClick={()=>handleModeSelection(mode.id)}>{mode.displaySmall}</button>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport { Redirect } from 'react-router'\nimport MatchVisualizerFactory from '../MatchVisualizers/MatchVisualizerFactory.js';\nimport TurnActionBar from '../TurnActionBar/TurnActionBar.jsx';\nimport GameModeSelectionBar from '../GameModeSelectionBar/GameModeSelectionBar.js';\nimport './MatchGamePage.css'\nimport _ from 'lodash';\n\nexport default class MatchGamePage extends Component {\n    constructor(props) { \n        super(props);\n        this.PLAYER_USER = 0;\n        this.PLAYER_AI = 1;\n\n        // Configuration of Game State:\n        // TODO: Move into state once modifiable;\n        this.numberOfRows = 4;\n        this.userGoesFirst = true;\n        this.MatchVisualizerFactory = new MatchVisualizerFactory();\n\n        const matchCounts = this._initializeMatchesArray()\n        this.state = {\n            provisionalMatches: matchCounts,\n            initialMatchesOnTurn: matchCounts,\n            currentPlayer: this.PLAYER_USER,\n            currentMatchVisualizer: this.MatchVisualizerFactory.initialVisualizer(),\n            isFirstTurn: true,\n            winner: undefined\n        }\n    }\n\n    // Handle the automated turns of the AI anytime the screen updates\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (_.max(this.state.initialMatchesOnTurn) === 0 && !this.state.winner) {\n            // First - check to see if there is a winner:\n            const winner = this.state.currentPlayer === this.PLAYER_AI ? \"AI\" : \"User\";\n            // The winner is the first person to start their turn with a 0 maxMatches\n            console.log(\"Congratulations on winning \" + winner + \"!\");\n            this.setState({\n                winner\n            });\n        } else if(this.state.currentPlayer === this.PLAYER_AI) { \n            // Else, if the AI's turn is up let the algo go!\n            this._AITurn()\n        }\n    }\n\n    // Return an initialized array of matches based on the number of rows the game has\n    _initializeMatchesArray() {\n        const matchCounts = [];\n        // For each row 0,1,2,3,... we have, push 1,3,5,7,... matches\n        for (let i = 0; i < this.numberOfRows; i++) { \n            matchCounts.push(1 + (2 * i)) \n        }\n        return matchCounts;\n    }\n\n    // Internally defined function for transitioning from one turn to the next\n    _nextPlayer() {\n        switch(this.state.currentPlayer) {\n            case this.PLAYER_AI:\n                return this.PLAYER_USER;\n            case this.PLAYER_USER:\n                return this.PLAYER_AI;\n            default: \n                console.error(`Switching current player but the turn-switch mechanic is undefined for this player ${this.state.currentPlayer}`);\n                return null;\n        }\n    }\n\n    // Increments the current count for the matches in the 'ith' row, being careful to not go above the previous highest value for that row\n    incrementMatches = (i) => {\n        const prevMax = this.state.initialMatchesOnTurn[i];\n        const curCount = this.state.provisionalMatches[i];\n        if (curCount + 1 > prevMax) {\n            return\n        } else {\n            const matchesWithInc = [...this.state.provisionalMatches];\n            matchesWithInc[i] += 1;\n            this.setState({\n                provisionalMatches: matchesWithInc\n            });\n        }\n    }\n\n    // Decremenets the current count for the matches in the 'ith' row, being careful to not go below 0;\n    decrementMatches = (i) => {\n        const curCount = this.state.provisionalMatches[i];\n        if (curCount - 1 < 0) {\n            return\n        } else {\n            const matchesWithDec = [...this.state.provisionalMatches];\n            matchesWithDec[i] -= 1;\n            this.setState({\n                provisionalMatches: matchesWithDec\n            });\n        }\n    }\n\n    // Resets the matches to how they were oriented at the beginning of the turn\n    resetTurn = () => {\n        this.setState({\n            provisionalMatches: this.state.initialMatchesOnTurn\n        });\n    }\n\n    // TODO: Better name;\n    // Finding a move baed on the nimSum: find a row with matchCount 'x' for which x > 0 && x ^ nimSum < x;\n    // Return the index of the current row, and the original count minus the XOR value \n    _getOptimalMoveBasedOnSum(nimSum) {\n        // Have an illegal index initially; inital value to remove shouldn't matter\n        let index = -1;\n        let valueToRemove = 0;\n        // Iterate over all our currentMatches\n        this.state.provisionalMatches.forEach((count, curIndex) => {\n            ///////////////////////\n            // Our Algorithm //////\n            //// Short, But Verbose\n            ///////////////////////\n            // To determine the ideal valueToRemove, let's think about what we want to end up with and work backwards.\n            //\n            // The optimal (non-endgame) strategy is to remove matches from some target row such that:\n            //  - The nim-sum of all _remaining_ matches is 0;\n            //  - i.e. x_0 ^ x_1 ^ x_target's remaining matches ^ ... ^ x_n = 0\n            // \n            // Remark 0: 0 ^ x = x for any number x\n            // Remark 1: x ^ x = 0 for any number x\n            // \n            // One way of achieving our ideal move this is to ensure that: \n            //  - After modifying our target row, the number of remaining matches should be:\n            //    (x_0 ^ x_1 ^ ... ^ x_n) many matches, since this value will XOR with our remaining matches \n            //    for a nimSum of 0;\n            // Said another way:\n            //  - Can we remove some 'n' matches from our target row such that\n            //     x_target - n === (x_0 ^ x_1 ^ ... ^ x_n), for all x !== x_target\n            //\n            // Important question yet to be answered: Which row is our target row?!\n            // \n            // To find x_target, we should iterate over all our rows and check the condition we described above.\n            // Something like, for every row 'i' with matches 'x_i':\n            // - Is there some number of matches 'n' s.t. \n            //   x_i - n === (x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i\n            // \n            // We're looking for the valueToRemove, 'n', so if we move our terms around a bit, we might be done!\n            // - n = 'x_i - (x_0 ^ x_1 ^ ... ^ x_n)' for all x !== x_i\n            // \n            // Except, minor problem -- 'n' might be negative based on the formula above!\n            // Consider matches [1,5,2]\n            // Row one has x_0 = 1\n            // nimSum of all rows except the first = 7\n            // 1 - 7 = (-6)\n            //\n            // We can't remove a negative number of matches, or add more matches than the number we started with \n            // One way we can take this into account is by only considering scenarios in which:\n            // - (x_i - n) < x_i\n            // Said another way: \n            // - '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i' < x_i\n            // By requiring this condition be met, we can ensure that our n is always > 0\n            //\n            // Great! So we have our necessary conditions to check for\n            // We know how to derive n from '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i'\n            // We just need to calculate: '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i'\n            //\n            // Remark 2: We know that our nimSum = (x_0 ^ x_1 ^ ... ^ x_n)\n            // \n            // Combining remarks 0, 1 and 2, we can calculate '(x_0 ^ x_1 ^ ... ^ x_n) for all x !== x_i' by computing:\n            // - x_i ^ nimSum\n            // Proof of equality fully expanded: \n            // - x_i ^ x_0 ^ x_1 ^ ... ^ x_i ^ ... ^ x_n) | Expand nimSum\n            // - x_i ^ x_i ^ x_0 ^ ... ^ x_n              | Chained Communitivity of ^ let's us move our x_i together\n            // - 0 ^ x_0 ^ ... ^ x_n                      | From Remark 1, x_i ^ x_i === 0\n            // - x_0 ^ ... ^ x_n for x !== x_i            | From Remark 0, x ^ 0 === x\n            //\n            // One last detail: once we find an optimal number of elements to remove, we can skip all the other rows\n            // \n            // Putting it all together now, our algorithm is:\n            // - For every row 'i' with matches 'x_i':\n            //      - Compute 'x_0 ^ ... ^ x_n for x !== x_i' by performing x_i ^ nimSum\n            //      - Check that x_0 ^ ... ^ x_n for x !== x_i is less that x_i\n            //      - If it is, 'n' is equal to 'x_i - (x_0 ^ ... ^ x_n for x !== x_i)',\n            //      - Make note that we've got an optimal move to make, so we can skip through all other rows\n            //  - Return the row of interest's index 'i' and the value 'n' to remove \n\n            if (index !== -1) return;\n            // If the result of count XOR nimSum is < count, this is the row we can remove a value from! \n            if ((count ^ nimSum) < count) {\n                // Track the index,\n                index = curIndex;\n                // And note our value to remove \n                valueToRemove = count - (count ^ nimSum);\n            }\n        });\n        return [index, valueToRemove]; \n    }\n\n    _AITurn= () =>{\n        // Strategy can be broken up into two modes: Endgame and typical\n        // First, check to see if we are in an endgame orientation - specifically, if there is <= 1 row left with more than one match\n        const curMatches = this.state.initialMatchesOnTurn;\n        const isEndGame = _.reduce(curMatches, (acc, count) => count > 1 ? acc + 1 : acc, 0) <= 1;\n        console.log('isEndGame: ', isEndGame);\n        if (isEndGame) {\n            // Calc the # of remaining turns by looking at the non-zero rows\n            const remainingTurns = _.reduce(curMatches, (acc, count) => count > 0 ? acc + 1 : acc, 0);\n            console.log('remainingTurns: ', remainingTurns);\n            // Get the max value \n            const maxVal = _.max(curMatches);\n            const indexOfMax = curMatches.indexOf(maxVal)\n            \n            const newMatches = [...curMatches];\n            // Get the number of matches to remove\n            const matchesToRemove = (maxVal - (remainingTurns % 2));\n            // If the matchesToREmove is zero, the AI cannot win; just remove the maxVal\n            if (matchesToRemove === 0) { \n                newMatches[indexOfMax] -= maxVal;\n            } else { \n                newMatches[indexOfMax] -= matchesToRemove;\n            }\n            this.finalizeTurn(newMatches);\n        } else { \n            // First, get the nim sum of all the remaining match-rows, i.e. XOR all counts together\n            const nimSum = _.reduce(curMatches, (nimSum, count) => count ^ nimSum, 0);\n            // console.log('nimSum: ', nimSum);\n            // Then, get the next value to remove and the index from the nimSum - if there is such a move\n            let [index, valueToRemove] = this._getOptimalMoveBasedOnSum(nimSum);\n            if (index === -1) {\n                // If there's on optimal move, pick a random row, pick a random number of matches;\n                const validRowsIndexes = _.reduce(curMatches, (acc, numberOfMatches, i) => {\n                    if (numberOfMatches === 0) {\n                        return acc;\n                    } else {\n                        acc.push(i);\n                        return acc;\n                    }\n                }, []);\n                // Pick a randomRow by index\n                index = validRowsIndexes[Math.floor(Math.random()*(validRowsIndexes.length))];\n                // Get the matches in that row by looking at the curMatches array\n                const randomRowMatchCount = curMatches[index];\n                // To get a random amount of matches to remove, use random to seed a valu between 0..1\n                // Multiply that my the matchCount to map it between 0...matchCount - 1; \n                // Add one to make sure we remove between 1...matchCount many matches.\n                valueToRemove = Math.floor(Math.random()*randomRowMatchCount) + 1\n            }\n            const newMatches = [...curMatches];\n            newMatches[index] -= valueToRemove;\n            this.finalizeTurn(newMatches)\n        }\n    }\n\n    // Finalize a turn by updating matches (using optional arg or current provisional) and switching to the next player\n    finalizeTurn = (optionalMatches=null) => {\n        // New matches are either provided matches or the provisional matches\n        const newMatches = optionalMatches ? optionalMatches : this.state.provisionalMatches\n        const nextPlayer = this._nextPlayer();\n        this.setState({\n            initialMatchesOnTurn: newMatches,\n            provisionalMatches: newMatches,\n            isFirstTurn: false,\n            currentPlayer: nextPlayer\n        });\n    }\n\n    // Restarts the game to it's initial configuration\n    restartGame = () => {\n        // Get the inital matches array\n        const initialMatches = this._initializeMatchesArray();\n        this.setState({\n            provisionalMatches: initialMatches,\n            initialMatchesOnTurn: initialMatches,\n            isFirstTurn: true,\n            // Starting player is based on whether or not the userGoesFirst\n            currentPlayer: this.userGoesFirst ? this.PLAYER_USER : this.PLAYER_AI\n        });\n    }\n\n    // Sets the current player to be the AI\n    handleForceAIMoveButton = () => { \n        this.setState({\n            currentPlayer: this.PLAYER_AI\n        });\n    }\n\n    // Takes a given mode and selects it \n    handleModeSelection = (modeId) => { \n        this.setState({\n            currentMatchVisualizer: this.MatchVisualizerFactory.getVisualizer(modeId)\n        })\n    }\n\n    render() {\n        const hasChangeOccurred = !_.isEqual(this.state.provisionalMatches, this.state.initialMatchesOnTurn);\n        const CurrentMatchVisualizer = this.state.currentMatchVisualizer;\n        // If there's a winner, redirect to the winner page\n        if (this.state.winner) { \n            return <Redirect push to={{\n                pathname: \"/gameover\",\n                search: \"?winner=\" + this.state.winner\n            }}/>\n        }\n        // Else, just render the current game\n        return (\n            <div id=\"match-game-container\" className=\"jumbotron\">\n                <GameModeSelectionBar\n                    possibleModes={this.MatchVisualizerFactory.allVizualizerOptions()}\n                    handleModeSelection={this.handleModeSelection}\n                />\n                <div id=\"match-game-visualization\" className=\"d-flex align-items-center\">\n                    <div className=\"w-100\">\n                        {CurrentMatchVisualizer && <CurrentMatchVisualizer\n                            provisionalMatches={this.state.provisionalMatches}\n                            initialMatchesOnTurn={this.state.initialMatchesOnTurn}\n                            incrementMatches={this.incrementMatches}\n                            decrementMatches={this.decrementMatches}\n                            hasChangeOccurred={hasChangeOccurred}\n                            numberOfRows={this.numberOfRows}\n                        />}\n                    </div>\n                </div>\n                <TurnActionBar\n                    isFirstTurn={this.state.isFirstTurn}\n                    restartGame={this.restartGame}\n                    resetTurn={this.resetTurn}\n                    finalizeTurn={this.finalizeTurn}\n                    handleForceAIMoveButton={this.handleForceAIMoveButton}\n                    hasChangeOccurred={hasChangeOccurred}\n                />\n            </div>\n        );\n    }\n}","import React from 'react'; \nimport { Link } from 'react-router-dom';\n\nexport default function LinkButton(props) {\n    const { pathname, displayText } = props;\n    return (\n        <Link to={pathname}>\n            <button className=\"btn btn-lg btn-primary\">\n                {displayText}\n            </button>\n        </Link>\n    )\n}","import React from 'react';\nimport LinkButton from '../LinkButton/LinkButton.js';\n\nexport default function WinPage(props) {\n    return (\n        <>\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-3 \">Congrats</h1>\n                <h1 className=\"display-4 mb-5\">You beat the AI!</h1>\n            </div>\n            <div className=\"d-flex justify-content-around m-5\" id=\"nav-btns\">\n                <LinkButton pathname=\"/\" displayText=\"Back Home\"/>\n                <LinkButton pathname=\"/play\" displayText=\"Play Again\"/>\n            </div>\n        </>\n    );\n}","import React from 'react';\nimport LinkButton from '../LinkButton/LinkButton.js';\n\nexport default function LosePage(props) {\n    return (\n        <>\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-3 \">Whoops</h1>\n                <h1 className=\"display-4 mb-5\">Better luck next time</h1>\n            </div>\n            <div className=\"d-flex justify-content-around m-5\" id=\"nav-btns\">\n                <LinkButton pathname=\"/\" displayText=\"Back Home\"/>\n                <LinkButton pathname=\"/play\" displayText=\"Play Again\"/>\n            </div>\n        </>\n    );\n}","import React from \"react\"; \nimport LinkButton from \"../LinkButton/LinkButton\";\n\nexport default function ErrorPage(props) {\n    return (\n        <>\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-3 \">Sorry</h1>\n                <h1 className=\"display-4 mb-5\">That's not a valid page...</h1>\n            </div>\n            <div className=\"d-flex justify-content-around m-5\" id=\"nav-btns\">\n                <LinkButton pathname=\"/\" displayText=\"Home\"/>\n                <LinkButton pathname=\"/play\" displayText=\"Play Nim\"/>\n            </div>\n        </>\n    );\n}","import React from 'react';\nimport queryString from 'query-string'\nimport WinPage from './WinPage.js'\nimport LosePage from './LosePage.js'\nimport ErrorPage from './ErrorPage.js'\n\n\nexport default function GameOverPage(props) {\n    const values = queryString.parse(props.location.search)\n    let GameOverScreen;\n    if (values.winner === \"AI\") {\n        GameOverScreen = LosePage;\n    } else if (values.winner === \"User\"){ \n        GameOverScreen = WinPage;\n    } else {\n        GameOverScreen = ErrorPage;\n    }\n    return (\n        <GameOverScreen/>\n    );\n}","import React from 'react';\nimport LinkButton from '../LinkButton/LinkButton.js';\nimport './TitlePage.css';\n\nexport default function TitlePage() { \n    return (\n        <section id=\"title-page\">\n            <div className=\"container jumbotron\">\n                <h1 className=\"display-3 text-center\">Digital Nim</h1>\n                <p className=\"lead text-center\">\n                    Play this classic parlor game against an automated algorithm, taking turns removing matches from rows. \n                    <br/>\n                    Whoever takes the last match loses!\n                </p>\n            </div>\n            <div id=\"title-buttons\">\n                <LinkButton pathname=\"/learn\" displayText=\"About Nim\"/>\n                <LinkButton pathname=\"/play\" displayText=\"Start Playing\"/>\n            </div>\n        </section>\n    );\n}","import React from 'react'; \nimport LinkButton from '../LinkButton/LinkButton.js'; \nexport default function TutorialAboutPage(props) { \n    return (\n        <div className=\"container jumbotron\">\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>\n                        About Nim\n                    </h1>\n                </div>\n            </div>\n            <div className=\"row p-2 align-items-center\">\n                <div className=\"col-md-4 p-2 text-center\">\n                    <img src=\"nimrod.png\" alt=\"\" style={{objectFit: \"cover\", height: \"auto\", maxWidth: \"200px\"}}/>\n                </div>\n                <div className=\"col-md-8 p-2\">\n                    <span>\n                        <strong>Nim</strong> is a <a href=\"https://en.wikipedia.org/wiki/Mathematical_game\">mathematical game</a>, specifically a <a href=\"https://en.wikipedia.org/wiki/Game_of_strategy\">game of strategy</a> in which two players take turns removing objects from distinct heaps or piles. \n                        On each turn, a player must remove at least one object, and may remove any number of objects provided they all come from the same heap/row. \n                        References to Nim date back to the 16th century, but it wasn't until 1901 that Charles Bouton deconstructing the optimal strategy of the game. \n                        Depending on the version being played, the goal of the game is either to avoid taking the last object, or to take the last object. \n                        This website uses the typical gameplay format - <em>misère</em> - in which the player to take the last object loses. \n                    </span>\n                </div>\n            </div>\n            <div className=\"row p-2 align-items-center\">\n                <div className=\"col-md-4 order-0 order-md-2 p-2 text-center\">\n                    <img src=\"nim-setup.png\" alt=\"Visual pyramid of nim play pieces, matchsticks arranged in rows of 1, 3, 5, and 7.\" style={{objectFit: \"cover\", height: \"auto\", maxWidth: \"200px\"}}/>\n                </div>\n                <div className=\"col-md-8 order-1 col-pull-md-8 p-2\">\n                    <span>\n                        Here you'll see the typical set up for a round of Nim. \n                        Rows of matches are set up on top of one another, each row adding two to the previous. \n                        The game starts by removing some number of matches from a single row. \n                        To win, you want to trap your opponent into taking the last piece.\n                        Think you're ready to jump right in? \n                        Click the play button to start.\n                        If you're interested in reading a bit more first, check out the winning strategy page!\n                    </span>\n                </div>\n            </div>\n            <div className=\"row p-5 justify-content-around\">\n                <LinkButton pathname=\"/play\" displayText=\"Play Now\"/>\n                <LinkButton pathname=\"/winning\" displayText=\"Learn More\"/>\n            </div>\n        </div>\n    );\n}","import React, {useState } from 'react'; \nexport default function WinningStrategyPage(props) { \n    const [finalInformationReveal, setFinalInformationReveal] = useState(false);\n\n    return (\n        <div className=\"container jumbotron\">\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1>\n                        Winning At Nim\n                    </h1>\n                </div>\n            </div>\n            <div className=\"row p-2 align-items-center\">\n                <div className=\"col-12 p-2\">\n                    <p>\n                        The secret to winning Nim is pretty straightforward: \n                        to win, must always take as many matchsticks as possible so that the “Nim Sum” of the rows is zero. \n                        The complicated part can be understanding what \"Nim Sum\" means.\n                    </p>\n                    <p>\n                        A Nim Sum is the \"Exclusive Or\", XOR for short, of all the numbers of matches together.\n                        For those who aren't familar with XOR, think of it as the \"or\" you're thinking of when speaking conversational english. \n                        When someone asks you if you want a water or a soda with your order they usually mean - \"Hey, you can have either a water, or a soda. Which of the two would you like?\".\n                        That's what Excluive Or means - one or the other, but not both.\n                    </p>\n                    <p>\n                        XOR rears it's head in everything from philosophy, electrical engineering, computer science and matchstick parlor games.\n                        Since XOR is a decision between two things we need to convert the number of matches in each row into <a href='https://en.wikipedia.org/wiki/Binary_number'>binary</a>.\n                        Instead of using the digits 0-9 to represent numbers, we just use 0 and 1. \n                        Similarly instead of a Ten's place and a Hundred's place, we have a Two's place, a Four's place, an Eight's place and so on. \n                        When we XOR two numbers, we're looking at each column's place for both numbers - the One's, Twos', Four's, Eight's -  and asking: \n                        for this column, is there only a single 1? \n                        If so, we put a 1 as our result. \n                        Otherwise, we put a 0. \n                    </p>\n                    <p>\n                        When calculating the Nim Sum of the current game, we XOR <i>all of our rows of matches</i>.\n                        But XOR only takes numbers at a time - how can we XOR all our rows together? \n                        All we do is take the result of that first XOR, and use that as one of othe numbers in our next XOR.\n                        So if we wanted to XOR 7, 2 and 3 together - 111, 010 and 011 - we'd XOR 111 and 010 first, which yields 101, or 5.\n                        Then we'd XOR 101 with 011, producing 110, or 6. \n                        A heuristic for quickly doing this over multiple rows is to, for each column, see if there are an even or odd number of 1's.\n                        If it's even, ultimate value for that column will be 0. \n                        If odd, it will be 1. \n                    </p>\n                    <p>\n                        Now that we understand XOR and how to caluclate a Nim Sum for a given list of numbers, let's think about the winning strategy is again. \n                        Our goal is that, at the end of our turn, the Nim Sum should be zero.\n                        To do so, we can remove matches from some row equal to the current Nim Sum.  \n                        So using XOR to combine all our rows into a single value, that value is how many matches we need to remove in order to beat our opponent. \n                    </p>\n                    <p>\n                        With this, you should be able to win the game if you're ready. \n                        But there is one more important piece of information that you might need... \n                        You should <a href='/play'>try to play first</a> and see if you can figure out what it is.\n                        If you're still in need of a bit more help, click here for more.\n                    </p>\n                    <p className={!finalInformationReveal ? \"\" : \"d-none\"} onClick={() => setFinalInformationReveal(!finalInformationReveal)} style={{cursor: \"pointer\"}}>\n                        <i>\n                            Click here if you're ready to see the final piece of information\n                        </i>\n                    </p>\n                    <p className={finalInformationReveal ? \"\" : \"d-none\" }>\n                        The final piece of vital information, which you hopefully discerned after trying to beat the AI: \n                        The person <b>who goes first cannot win unless their opponent</b> messes up the optimal strategy. \n                        While this happens often when you're in an 17th/18th century French parlor playing with drunk aristocrats, it's pretty uncommon when you're playing against a computerized algorithm. \n                        Go ahead, let the AI to go first, and see how that changes things. \n                        Remember, you want <i>the opponent</i> to be the <i>last</i> person to take a match. \n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react'; \nimport { Link } from 'react-router-dom';\nimport './NimTopBar.css';\n\nexport default function NimTopBar(props) {\n    return (\n        <>\n            <nav className=\"navbar navbar-light navbar-expand-md mb-2\">\n                <Link className=\"navbar-brand\" to=\"/\">\n                    <img src=\"matchstick-2.png\"m alt=\"subtle matchstick logo to accompany brand name\" className=\"pl-1 pr-1\" style={{height: \"30px\" }}/>\n                    Digital Nim\n                </Link>\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul class=\"navbar-nav mr-auto\">\n                        <li class=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/play\">Play</Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/learn\">About Nim</Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/winning\">How to Win</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </>\n    );\n}\n\n","import { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0)\n    }\n  }\n\n  render() {\n    return this.props.children\n  }\n}\n\nexport default withRouter(ScrollToTop)","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport TransitionRouteWrapper from './TransitionRouteWrapper/TransitionRouteWrapper.jsx';\nimport { TitlePage, GameOverPage, ErrorPage, AboutPage, WinningStrategyPage, MatchGamePage } from './Pages'\nimport NimTopBar from './NimTopBar/NimTopBar.js'\nimport ScrollToTop from './ScrollToTop.js'\nimport './App.css';\n\nclass App extends Component {\n    routerRender = ({location}) => { \n        const WrappedTitlePage = TransitionRouteWrapper(TitlePage)\n        const WrappedGameOverPage = TransitionRouteWrapper(GameOverPage)\n        const WrappedAboutPage = TransitionRouteWrapper(AboutPage)\n        const WrappedWinningStrategyPage = TransitionRouteWrapper(WinningStrategyPage)\n        const WrappedPlayPage = TransitionRouteWrapper(MatchGamePage)\n        const WrappedErrorPage = TransitionRouteWrapper(ErrorPage)\n        return (\n            <TransitionGroup>\n                <CSSTransition\n                    key={location.key}\n                    timeout={1000}\n                >\n                    <Switch location={location}>\n                        <Route exact path=\"/\" component={WrappedTitlePage}/>\n                        <Route path=\"/learn\" component={WrappedAboutPage}/>\n                        <Route path=\"/winning\" component={WrappedWinningStrategyPage}/>\n                        <Route path=\"/play\" component={WrappedPlayPage}/>\n                        <Route path=\"/gameover\" component={WrappedGameOverPage}/>\n                        <Route component={WrappedErrorPage}/>\n                    </Switch>\n                </CSSTransition>\n            </TransitionGroup>\n        );\n    }\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL}>\n                <ScrollToTop>\n                    <NimTopBar/>\n                    <Route render={this.routerRender}/>\n                </ScrollToTop>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}